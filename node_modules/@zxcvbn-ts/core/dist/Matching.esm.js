import { extend, sorted } from './helper.esm.js';
import MatchDate from './matcher/date/matching.esm.js';
import MatchDictionary from './matcher/dictionary/matching.esm.js';
import MatchRegex from './matcher/regex/matching.esm.js';
import MatchRepeat from './matcher/repeat/matching.esm.js';
import MatchSequence from './matcher/sequence/matching.esm.js';
import MatchSpatial from './matcher/spatial/matching.esm.js';
import Options from './Options.esm.js';

class Matching {
  constructor() {
    this.matchers = {
      date: MatchDate,
      dictionary: MatchDictionary,
      regex: MatchRegex,
      repeat: MatchRepeat,
      sequence: MatchSequence,
      spatial: MatchSpatial
    };
  }

  match(password) {
    const matches = [];
    const matchers = [...Object.keys(this.matchers), ...Object.keys(Options.matchers)];
    matchers.forEach(key => {
      if (!this.matchers[key] && !Options.matchers[key]) {
        return;
      }

      const Matcher = this.matchers[key] ? this.matchers[key] : Options.matchers[key].Matching;
      const usedMatcher = new Matcher();
      extend(matches, usedMatcher.match({
        password,
        omniMatch: this
      }));
    });
    return sorted(matches);
  }

}

export default Matching;
//# sourceMappingURL=Matching.esm.js.map
